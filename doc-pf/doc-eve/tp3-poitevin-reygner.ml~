(*POITEVIN Eve & REYGNER Etienne*)

(* 3.1. *)

(* Exercice 50 *)

type produit =
  | MP3
  | Appareil
  | Camera
  | Telephone
  | Ordinateur;;

type marque =
  | Alpel
  | Syno
  | Massung
  | Liphisp;;

type article = Article of produit * marque * int * int;;

let art = (Article(Telephone, Alpel, 1000, 3))::(Article(Telephone, Massung, 800, 3))::[];;

(* Exercice 51 *)

let rec est_en_stock = fun p1 m1 i1 l ->
  match l with
  |[] -> false
  |Article(p, m, x, s)::l' -> if ((p1=p && m1=m && i1=x) && (s>0)) then true else est_en_stock p1 m1 i1 l';;

assert(est_en_stock Telephone Alpel 1000 art = true);;

(* Exercice 52 *)

let rec ajoute_article = fun a l -> let Article(p, m, x, s) = a in
  match l with
  | [] -> a::[]
  | Article(ps, ms, xs, ss)::l' -> if p = ps && m = ms && x = xs && s = ss then Article(ps, ms, xs, ss + s)::l' else Article(ps, ms, xs, ss)::(ajoute_article a l');;

ajoute_article (Article(Ordinateur, Alpel, 300, 1)) art;;

(* Exercice 53 *)

let rec enleve_article = fun a l -> let Article(p, m, x, s) = a in
                                    match l with
                                    | [] -> []
                                    | Article(ps, ms, xs, ss)::l' -> if p = ps && m = ms && x = xs && s = ss then enleve_article a l' else Article(ps, ms, xs, ss)::(enleve_article a l');;


enleve_article (Article(Ordinateur, Alpel, 300, 1)) art;;
ajoute_article (Article(Ordinateur, Alpel, 300, 1)) art;;

(* Exercice 26 *)

exception Error;;

let rec trouve_min_bis = fun l a ->let Article(p1, q1, m1, w1) = a in match l with
                                    | [] -> a
                                    | Article(p, q, x, w)::l' -> if x < m1 then trouve_min_bis l' (Article(p, q, x, w)) else trouve_min_bis l' a;;

let trouve_min = fun l -> match l with
                          | [] -> raise Error
                          | a::l' -> let min = trouve_min_bis l a in
                                    let p = enleve_article min l in (min, p);;
art;;
(*trouve_min art;;*)

(* Exercice 27 *)

let rec tri_selection = fun l -> match l with
                                 | [] -> []
                                 | _ -> let (min, s) = trouve_min l in min::(tri_selection s);;


tri_selection art;;

(* Exercice 28 *)


